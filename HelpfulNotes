********** On Package.json ***********

for a custom script name you must 'npm run' then script name, if it is one that node recognizes such as 'start' then npm followed by the script name is accepted with no error

--save-dev is used for development dependencies

--save for production, dependencies that integrate with our production deployment

-g installs global, into your machine



********** On Package-lock.json ***********

shows dependencies that you originally installed in project, this is helpful as sometimes running npm install alone can update your original packages to updated versions.



********** On modules ***********
source ( Academind NodeJS course )

Global features: Keywords like const or function but also some global objects like process

Core Node.js Modules: Examples would be the file-system module ("fs"), the path module ("path") or the Http module ("http")

Third-party Modules: Installed via npm install - you can add any kind of feature to your app via this way

Global features are always available, you don't need to import them into the files where you want to use them.

Core Node.js Modules don't need to be installed (NO npm install is required) but you need to import them when you want to use features exposed by them.

Example:

const fs = require('fs');

You can now use the fs object exported by the "fs" module.

Third-party Modules need to be installed (via npm install in the project folder) AND imported.

Example (which you don't need to understand yet - we'll cover this later in the course):

// In terminal/ command prompt
npm install --save express-session
// In code file (e.g. app.js)
const sessions = require('express-session');


********** On middleware ***********
middleware -a core concept of expressJS, receives incoming request that are funneled through functions provided by express


********** On Express ***********
next() = only use !!in-place-of!! sending a response to a request, never along with.

req.body = extracts data that comes in from forms, must be parsed with "body-parser"

'app' is an instance of express() objects

app.use = takes in a path and a function, funstion runs when that path has a request matches the path in argument

app.listen() = replaces below, sets our server ... no need to require http when using this express method.
// // select a port of choice
// const port = 5000;
//
// // set up of server
// const server = http.createServer (app);
//
// // listens for server, logs when server is running
// server.listen(port, () =>{
//   console.log('server is running on port 5000')
// })

********** On body-parser ***********
parses data coming that are type 'body', lie those coming from input forms, there are other type of parsers for other type of incoming data.

********** On express.Router() ***********
router is inherited with expressJS
exports routes with module exports and import into app.js for cleaner code
-to send an htmlas response use res.sendFile()

********** On path nodejs core module ***********
__dirname (tells path start inside this file [whichever file you type __dirname in])
../ (means go up one level ex: if you have a file inside a folder, __dirname goes into its folder)
then from there seperate commas and folders you want to go into in order with single quotes see shop.js for example line 8

********** On templating engines ***********
EJS, PUG, Handlebars are all html template engines
